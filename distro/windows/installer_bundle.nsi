;
; Setup script in order to create a windows auto-installer for OpenTURNS module.
;
; To lauch the creation of the installer :
;   makensis  -DMODULE_PREFIX=/absolute/path -DMODULE_VERSION=1.0 -DOPENTURNS_VERSION=1.0 installer.nsi
;

SetCompressor /SOLID lzma

RequestExecutionLevel user

; Prefix where module is installed on Linux.
!ifndef MODULE_PREFIX
  !error "MODULE_PREFIX must be defined"
!endif

!ifndef PYTHON_PREFIX
  !error "PYTHON_PREFIX must be defined"
!endif

!ifndef ARCH
  !error "ARCH must be defined"
!endif

!include "WordFunc.nsh" ; for ${WordAdd}, ${WordReplace}
!include "FileFunc.nsh" ; for ${DirState} , ${GetParent}, ${ConfigWrite}, ${GetFileAttributes}
!include "TextFunc.nsh" ; for ${ConfigRead}
!include "LogicLib.nsh" ; for ${If}

!define MODULE_NAME Persalys
!define MODULE_NAME_LOWERCASE persalys

; Script generated by the HM NIS Edit Script Wizard.
; HM NIS Edit Wizard helper defines
!ifndef MODULE_VERSION
  !error "MODULE_VERSION must be defined"
!endif
!define PRODUCT_VERSION ${MODULE_VERSION}

!define PRODUCT_NAME "${MODULE_NAME}"
!define PRODUCT_NAME_LOWERCASE "${MODULE_NAME_LOWERCASE}"
; used for submodule FULL_NAME = "${MODULE_NAME}-${PRODUCT_NAME}"
!define FULL_NAME "${MODULE_NAME}"
!define FULL_NAME_LOWERCASE "${MODULE_NAME_LOWERCASE}"
!define PRODUCT_WEB_SITE "http://www.openturns.org"
!define OT_PRODUCT_DIR_REGKEY "Software\${MODULE_NAME}"
!define PRODUCT_DIR_REGKEY "Software\${MODULE_NAME}\${PRODUCT_NAME}"
; If root_key is SHCTX or SHELL_CONTEXT, it will be replaced with HKLM if SetShellVarContext is set to all and with HKCU if SetShellVarContext is set to current.
!define PRODUCT_ROOT_KEY SHCTX

!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${MODULE_NAME}\${PRODUCT_NAME}"

; MUI 1.67 compatible ------
!include "MUI.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "persalys.ico"

; Language Selection Dialog Settings
!define MUI_LANGDLL_REGISTRY_ROOT "${PRODUCT_ROOT_KEY}"
!define MUI_LANGDLL_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
!define MUI_LANGDLL_REGISTRY_VALUENAME "NSIS:Language"

; Welcome page
!define MUI_WELCOMEPAGE_TEXT "This wizard will guide you through the installation of ${FULL_NAME} ${PRODUCT_VERSION}.\r\rThis installer requires Windows >= 10."
!insertmacro MUI_PAGE_WELCOME
; License page
;!insertmacro MUI_PAGE_LICENSE "COPYING.txt"
; Components page
!insertmacro MUI_PAGE_COMPONENTS
; Directory page
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE "DirectoryEmptyLeave"
!define MUI_DIRECTORYPAGE_TEXT_TOP "Setup will install ${FULL_NAME} ${PRODUCT_VERSION} in the following folder. To install in a different folder, click Browse and select another folder."
!insertmacro MUI_PAGE_DIRECTORY
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_TEXT "${FULL_NAME} ${PRODUCT_VERSION} has been installed on your computer.\r\rSee README.txt for further explanation."
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; MUI end ------

Function DirectoryEmptyLeave
  ; Check if the installation folder is empty
  IfFileExists "$INSTDIR\*.*" 0 skip_abort
    MessageBox MB_OK|MB_ICONEXCLAMATION "The installation directory you have chosen, $INSTDIR, is not empty. $\rPlease select an empty directory." /SD IDOK
    Abort
  skip_abort:
FunctionEnd

Name "${FULL_NAME} ${PRODUCT_VERSION}"
OutFile "${FULL_NAME_LOWERCASE}-${PRODUCT_VERSION}-${ARCH}.exe"
!define UNINST_EXE "uninst-${FULL_NAME_LOWERCASE}.exe"
Var MODULE_INSTALL_PATH
ShowInstDetails show
ShowUnInstDetails show

!macro CHECK_REG_VIEW
  ${If} "${ARCH}" == "x86_64"
     SetRegView 64
  ${EndIf}
!macroend


!macro PRINT MSG
  SetDetailsPrint both
  DetailPrint "${MSG}"
  SetDetailsPrint none
!macroend


Var UserInstall

; Check that current user has administrator privileges
; if ok : set UserInstall to 0, if not : set UserInstall to 1
!macro CHECK_USER_INSTALL WARN_MSG
  StrCpy $UserInstall "0"

  ; avoid check if /userlevel option is present on command line
  ${GetParameters} $R1
  ClearErrors
  ${GetOptions} $R1 '/userlevel=' $R0
  IfErrors 0 set_level

  ClearErrors
  WriteRegStr HKLM ${PRODUCT_DIR_REGKEY} "Test" "${PRODUCT_VERSION}"
  IfErrors user_install admin_install
  user_install:
  StrCpy $UserInstall "1"
  MessageBox MB_OK|MB_ICONINFORMATION "You are not running Windows from an administrator account.$\r$\rTo enable admin rights on Windows 7 and above: right click on the installer, choose 'Run as administrator'.$\r$\r${WARN_MSG}" /SD IDOK
  admin_install:
  DeleteRegValue HKLM ${PRODUCT_DIR_REGKEY} "Test"
  Goto end_set_level

  set_level:
  StrCpy $UserInstall $R0
  end_set_level:
!macroend


!macro CHECK_USER_INSTALL_FILE FILE_NAME
  ; Get previous installation mode
  IfFileExists "${FILE_NAME}" user_mode 0
  StrCpy $UserInstall "0"
  Goto end_user_mode
  user_mode:
  StrCpy $UserInstall "1"
  end_user_mode:

  ${If} "$UserInstall" == "0"
    !insertmacro CHECK_USER_INSTALL "Uninstall from a non-administrator could not work cause you installed ${PRODUCT_NAME} from an admin account."
  ${EndIf}
!macroend


!macro CREATE_USER_INSTALL_FILE FILE_NAME
  ; create a file for uninstaller
  FileOpen $0 "${FILE_NAME}" w
  IfErrors userfile_fail
  FileWrite $0 "${PRODUCT_NAME} was installed in user mode."
  FileClose $0
  userfile_fail:
!macroend

; Set whether Persalys shortcuts will be in every user menu or only in current user menu.
; CHECK_USER_INSTALL must have been called first
!macro SET_MENU_CONTEXT
  ${If} "$UserInstall" == "0"
    SetShellVarContext all
  ${Else}
    SetShellVarContext current
  ${EndIf}
!macroend

; Launched before the section are displayed
Function .onInit
  !insertmacro CHECK_REG_VIEW

  !insertmacro MUI_LANGDLL_DISPLAY

  !insertmacro CHECK_USER_INSTALL "Installation switched to user install."

  !insertmacro SET_MENU_CONTEXT

  ${If} "$UserInstall" == "1"
    StrCpy $INSTDIR "$LOCALAPPDATA\${PRODUCT_NAME}"
  ${Else}
    StrCpy $INSTDIR "$PROGRAMFILES64\${PRODUCT_NAME}"
  ${EndIf}

  SetDetailsPrint both

  StrCpy $MODULE_INSTALL_PATH "$INSTDIR\Lib\site-packages\${MODULE_NAME_LOWERCASE}"

  ; if already installed, uninstall previous.
  ReadRegStr $0 ${PRODUCT_ROOT_KEY} "${PRODUCT_DIR_REGKEY}" "${PRODUCT_NAME}"
  ${If} $0 != ""
    MessageBox MB_YESNO|MB_ICONEXCLAMATION "${PRODUCT_NAME} $0 is already installed in directory $INSTDIR. $\rDo you want to uninstall this installed version (recommended)?" /SD IDYES IDNO skip_uninstall

    ; copy uninstaller to temp dir in order to erase the whole ot dir
    ; _? option permit to avoid uninstaller to copy itself to tempdir. it permit too to make ExecWait work
    CopyFiles "$INSTDIR\${UNINST_EXE}" $TEMP
    IfSilent 0 +3
    ; silent uninstall
    ExecWait '"$TEMP\${UNINST_EXE}" /S _?=$INSTDIR'
    Goto +2
    ExecWait '"$TEMP\${UNINST_EXE}" _?=$INSTDIR'

    skip_uninstall:
  ${EndIf}

  SetDetailsPrint none
  SetAutoClose false
FunctionEnd


Section "!${PRODUCT_NAME} DLL & doc" SEC01
  SetOverwrite on

  StrCpy $MODULE_INSTALL_PATH "$INSTDIR\Lib\site-packages\${MODULE_NAME_LOWERCASE}"

  SetDetailsPrint both
  ClearErrors
  CreateDirectory "$MODULE_INSTALL_PATH"
  IfErrors permisssion_nok permission_ok
  permisssion_nok:
  !insertmacro PRINT "Failed to create ${PRODUCT_NAME} directory $MODULE_INSTALL_PATH!"
  MessageBox MB_OK|MB_ICONEXCLAMATION "Failed to create ${PRODUCT_NAME} directory $MODULE_INSTALL_PATH!$\rCheck directory permission.$\rInstallation aborted." /SD IDOK
  Abort
  permission_ok:
  SetDetailsPrint none

  !insertmacro PRINT "Install binary files in $INSTDIR."
  SetOutPath "$INSTDIR"
  File /r "${PYTHON_PREFIX}\*.*"

  !insertmacro PRINT "Install binary files in $MODULE_INSTALL_PATH."
  SetOutPath "$MODULE_INSTALL_PATH"
  CopyFiles /SILENT $MODULE_INSTALL_PATH\..\openturns\*.dll $MODULE_INSTALL_PATH
  File /r "${MODULE_PREFIX}\bin\*.*"
  File /r "${MODULE_PREFIX}\Lib\site-packages\${MODULE_NAME_LOWERCASE}\*.*"
  SetOutPath "$MODULE_INSTALL_PATH\platforms"
  File /r "${MODULE_PREFIX}\lib\platforms\"
  SetOutPath "$MODULE_INSTALL_PATH\imageformats"
  File /r "${MODULE_PREFIX}\lib\imageformats\"

  SetOutPath "$MODULE_INSTALL_PATH"
  File "README.txt"
  File "persalys.ico"

  !insertmacro PRINT "Install doc in $MODULE_INSTALL_PATH\doc\."
  SetOutPath "$MODULE_INSTALL_PATH\doc\"
  File /r "html"

  ${If} "$UserInstall" == "1"
    !insertmacro PRINT "Install UserInstall file in $MODULE_INSTALL_PATH\UserInstall"
    !insertmacro CREATE_USER_INSTALL_FILE "$MODULE_INSTALL_PATH\UserInstall"
  ${EndIf}

  !insertmacro PRINT "Put ${PRODUCT_NAME} in windows registry."
  WriteRegStr ${PRODUCT_ROOT_KEY} ${PRODUCT_DIR_REGKEY} "${PRODUCT_NAME}" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_ROOT_KEY} ${PRODUCT_DIR_REGKEY} "InstallPath" "$INSTDIR"

  !insertmacro PRINT "Install uninstaller in $INSTDIR\${UNINST_EXE}."
  WriteUninstaller "$INSTDIR\${UNINST_EXE}"
  WriteRegStr ${PRODUCT_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\${UNINST_EXE}"
  WriteRegStr ${PRODUCT_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
SectionEnd


Section -AdditionalIcons
  !insertmacro PRINT "Create ${PRODUCT_NAME} menu."
  ; install shortcuts on every accounts or user only depending on the context
  !insertmacro SET_MENU_CONTEXT
  SetOutPath "$MODULE_INSTALL_PATH"

  CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\README.lnk" "$MODULE_INSTALL_PATH\README.txt" "" ""
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Documentation.lnk" "$MODULE_INSTALL_PATH\doc\html\index.html" "" ""
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall-${PRODUCT_NAME}.lnk" "$INSTDIR\${UNINST_EXE}" "" ""
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk" "$MODULE_INSTALL_PATH\persalys_launcher.exe" "" "$MODULE_INSTALL_PATH\persalys.ico"

  !insertmacro PRINT "Create desktop shortcut."
  CreateShortCut "$DESKTOP\${PRODUCT_NAME}.lnk" "$MODULE_INSTALL_PATH\persalys_launcher.exe" "" "$MODULE_INSTALL_PATH\persalys.ico"
SectionEnd


; Section descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
!insertmacro MUI_DESCRIPTION_TEXT ${SEC01} "Python stack."
!insertmacro MUI_FUNCTION_DESCRIPTION_END


Function un.onInit
  !insertmacro MUI_UNGETLANGUAGE

  ; Get previous installation mode
  StrCpy $MODULE_INSTALL_PATH "$INSTDIR\Lib\site-packages\${MODULE_NAME_LOWERCASE}"
  !insertmacro CHECK_USER_INSTALL_FILE "$MODULE_INSTALL_PATH\UserInstall"

  !insertmacro SET_MENU_CONTEXT

  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Do you want to remove the module $(^Name) from directory $INSTDIR?" /SD IDYES IDYES +2
  Abort
FunctionEnd


Section Uninstall
  ; nsis can't delete current directory
  SetOutPath $TEMP

  !insertmacro CHECK_REG_VIEW

  !insertmacro SET_MENU_CONTEXT

  SetDetailsPrint both
  RMDir /R $INSTDIR

  RMDir /r "$SMPROGRAMS\${PRODUCT_NAME}"

  !insertmacro PRINT "Delete desktop shortcut."
  Delete "$DESKTOP\${PRODUCT_NAME}.lnk"

  !insertmacro PRINT "Remove ${PRODUCT_NAME} in windows registry."
  DeleteRegKey ${PRODUCT_ROOT_KEY} ${PRODUCT_UNINST_KEY}
  DeleteRegKey ${PRODUCT_ROOT_KEY} ${PRODUCT_DIR_REGKEY}

  SetAutoClose false

SectionEnd
