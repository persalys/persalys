class=FunctionalChaosAnalysis name=chaos_0 designOfExperiment=design interestVariables=[y0,y1] analyticalValidation=true testSampleValidation=false kFoldValidation=false leaveOneOutValidation=false test sample parameters=class=PointWithDescription name=Unnamed dimension=2 description=[Percentage,Seed] values=[20,0] k-Fold parameters=class=PointWithDescription name=Unnamed dimension=2 description=[Number of folds,Seed] values=[5,0] chaosDegree=4 sparseChaos=true
result= class=FunctionalChaosAnalysisResult name=Unnamed mean=class=Point name=Unnamed dimension=2 values=[0,0.488383] variance=class=Point name=Unnamed dimension=2 values=[0.859525,0.85977] sobolResult=class=SobolResult name=Unnamed outputNames=[y0,y1] firstOrderIndices=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2 dimension=2 description=[xi1,xi2] data=[[0.511719,0.488281],[0.511487,0.488513]] totalIndices=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=2 dimension=2 data=[[0.511719,0.488281],[0.511487,0.488513]] firstOrderIndicesInterval=[] totalIndicesInterval=[] callsNumber=0 confidenceIntervalLength=-1
functionalChaosResult meta model=([0,0.488383] + [-0.413383,-0.413336] * (1.73205 * x0) + [-0.0573358,-0.05737] * (1.73205 * x1) + [0.482381,0.482187] * (-1.11803 + 3.3541 * x0^2) + [0.275348,0.27548] * (-1.11803 + 3.3541 * x1^2) + [0.160664,0.160929] * (-3.96863 * x0 + 6.61438 * x0^3) + [-0.18108,-0.181301] * (-3.96863 * x1 + 6.61438 * x1^3) + [-0.102202,-0.10253] * (1.125 - 11.25 * x0^2 + 13.125 * x0^4) + [-0.554793,-0.55494] * (1.125 - 11.25 * x1^2 + 13.125 * x1^4))o((| y0 = Normal(mu = 0, sigma = 1) -> y0 : Uniform(a = -1, b = 1)
| y1 = Normal(mu = 0, sigma = 1) -> y1 : Uniform(a = -1, b = 1)
)o(| y0 = Uniform(a = 0, b = 10) -> y0 : Normal(mu = 0, sigma = 1)
| y1 = Uniform(a = 0, b = 10) -> y1 : Normal(mu = 0, sigma = 1)
))
orthogonal basis=class=OrthogonalProductPolynomialFactory univariate polynomial collection=[class=OrthogonalUniVariatePolynomialFamily implementation=class=StandardDistributionPolynomialFactory hasSpecificFamily=true specificFamily=class=OrthogonalUniVariatePolynomialFamily implementation=class=LegendreFactory measure=class=Uniform name=Uniform dimension=1 a=-1 b=1,class=OrthogonalUniVariatePolynomialFamily implementation=class=StandardDistributionPolynomialFactory hasSpecificFamily=true specificFamily=class=OrthogonalUniVariatePolynomialFamily implementation=class=LegendreFactory measure=class=Uniform name=Uniform dimension=1 a=-1 b=1] measure=class=ComposedDistribution name=ComposedDistribution dimension=2 copula=class=IndependentCopula name=IndependentCopula dimension=2 marginal[0]=class=Uniform name=Uniform dimension=1 a=-1 b=1 marginal[1]=class=Uniform name=Uniform dimension=1 a=-1 b=1
class=FunctionalChaosAnalysis name=chaos_1 designOfExperiment=design interestVariables=[y1] analyticalValidation=true testSampleValidation=true kFoldValidation=true leaveOneOutValidation=false test sample parameters=class=PointWithDescription name=Unnamed dimension=2 description=[Percentage,Seed] values=[30,2] k-Fold parameters=class=PointWithDescription name=Unnamed dimension=2 description=[Number of folds,Seed] values=[4,2] chaosDegree=4 sparseChaos=false
result= class=FunctionalChaosAnalysisResult name=Unnamed mean=class=Point name=Unnamed dimension=1 values=[0.479245] variance=class=Point name=Unnamed dimension=1 values=[0.930686] sobolResult=class=SobolResult name=Unnamed outputNames=[y1] firstOrderIndices=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=1 dimension=2 description=[xi1,xi2] data=[[0.474121,0.512988]] totalIndices=class=Sample name=Unnamed implementation=class=SampleImplementation name=Unnamed size=1 dimension=2 data=[[0.487012,0.525879]] firstOrderIndicesInterval=[] totalIndicesInterval=[] callsNumber=0 confidenceIntervalLength=-1
functionalChaosResult meta model=(0.479245 - 0.38203 * (1.73205 * x0) - 0.0562303 * (1.73205 * x1) + 0.494897 * (-1.11803 + 3.3541 * x0^2) + 0.0534577 * ((1.73205 * x0) * (1.73205 * x1)) + 0.259244 * (-1.11803 + 3.3541 * x1^2) + 0.207598 * (-3.96863 * x0 + 6.61438 * x0^3) + 0.047602 * ((-1.11803 + 3.3541 * x0^2) * (1.73205 * x1)) + 0.0282647 * ((1.73205 * x0) * (-1.11803 + 3.3541 * x1^2)) - 0.207633 * (-3.96863 * x1 + 6.61438 * x1^3) - 0.0853881 * (1.125 - 11.25 * x0^2 + 13.125 * x0^4) + 0.0381849 * ((-3.96863 * x0 + 6.61438 * x0^3) * (1.73205 * x1)) + 0.0478029 * ((-1.11803 + 3.3541 * x0^2) * (-1.11803 + 3.3541 * x1^2)) + 0.0482908 * ((1.73205 * x0) * (-3.96863 * x1 + 6.61438 * x1^3)) - 0.603282 * (1.125 - 11.25 * x1^2 + 13.125 * x1^4))o((| y0 = Normal(mu = 0, sigma = 1) -> y0 : Uniform(a = -1, b = 1)
| y1 = Normal(mu = 0, sigma = 1) -> y1 : Uniform(a = -1, b = 1)
)o(| y0 = Uniform(a = 0, b = 10) -> y0 : Normal(mu = 0, sigma = 1)
| y1 = Uniform(a = 0, b = 10) -> y1 : Normal(mu = 0, sigma = 1)
))
orthogonal basis=class=OrthogonalProductPolynomialFactory univariate polynomial collection=[class=OrthogonalUniVariatePolynomialFamily implementation=class=StandardDistributionPolynomialFactory hasSpecificFamily=true specificFamily=class=OrthogonalUniVariatePolynomialFamily implementation=class=LegendreFactory measure=class=Uniform name=Uniform dimension=1 a=-1 b=1,class=OrthogonalUniVariatePolynomialFamily implementation=class=StandardDistributionPolynomialFactory hasSpecificFamily=true specificFamily=class=OrthogonalUniVariatePolynomialFamily implementation=class=LegendreFactory measure=class=Uniform name=Uniform dimension=1 a=-1 b=1] measure=class=ComposedDistribution name=ComposedDistribution dimension=2 copula=class=IndependentCopula name=IndependentCopula dimension=2 marginal[0]=class=Uniform name=Uniform dimension=1 a=-1 b=1 marginal[1]=class=Uniform name=Uniform dimension=1 a=-1 b=1
#!/usr/bin/env python

import openturns as ot
import persalys

myStudy = persalys.Study('myStudy')
persalys.Study.Add(myStudy)
dist_xi1 = ot.Uniform(0, 10)
xi1 = persalys.Input('xi1', 0, dist_xi1, '')
dist_xi2 = ot.Uniform(0, 10)
xi2 = persalys.Input('xi2', 0, dist_xi2, '')
xi3 = persalys.Input('xi3', 0.5, '')
fake_y0 = persalys.Output('fake_y0', '')
fake_y0.setIsSelected(False)
y0 = persalys.Output('y0', '')
y1 = persalys.Output('y1', '')
inputs = [xi1, xi2, xi3]
outputs = [fake_y0, y0, y1]
formulas = ['xi1', 'cos(0.5*xi1) + sin(xi2)', 'cos(0.5*xi1) + sin(xi2) + xi3']
model = persalys.SymbolicPhysicalModel('model', inputs, outputs, formulas)
myStudy.add(model)
design = persalys.FixedDesignOfExperiment('design', model)
inputSample = [
[0.981558, 9.34995, 0.5],
[9.70026, 0.30288, 0.5],
[1.38234, 3.34402, 0.5],
[4.1174, 7.56492, 0.5],
[4.74243, 3.62974, 0.5],
[1.56481, 5.31197, 0.5],
[2.93068, 0.803989, 0.5],
[0.344511, 1.7489, 0.5],
[6.65719, 6.77155, 0.5],
[9.90494, 3.59117, 0.5],
[5.44927, 9.44523, 0.5],
[1.79129, 0.120693, 0.5],
[2.09805, 7.68782, 0.5],
[7.62608, 3.18547, 0.5],
[3.6203, 9.06515, 0.5],
[7.28009, 2.88113, 0.5],
[5.27979, 6.57883, 0.5],
[8.62324, 9.84313, 0.5],
[5.02451, 1.02946, 0.5],
[3.06968, 4.90491, 0.5],
[7.42848, 5.05849, 0.5],
[2.50606, 6.94339, 0.5],
[8.44912, 9.71558, 0.5],
[8.37697, 8.25885, 0.5],
[0.766058, 5.53776, 0.5],
[6.41211, 7.96048, 0.5],
[9.47024, 6.35812, 0.5],
[4.29867, 4.4629, 0.5],
[8.94515, 1.20186, 0.5],
[1.11151, 7.38445, 0.5],
[9.26915, 5.95302, 0.5],
[0.123229, 0.435811, 0.5],
[2.27574, 3.81582, 0.5],
[6.91293, 8.6476, 0.5],
[9.13424, 0.731609, 0.5],
[7.88858, 8.94895, 0.5],
[8.17064, 2.44824, 0.5],
[1.80727, 1.89095, 0.5],
[5.963, 5.78781, 0.5],
[7.16978, 7.08847, 0.5],
[3.86419, 2.25033, 0.5],
[3.309, 4.60121, 0.5],
[0.572027, 8.07031, 0.5],
[6.15464, 8.52162, 0.5],
[5.69626, 2.16052, 0.5],
[4.52506, 1.5471, 0.5],
[3.52051, 4.09698, 0.5],
[2.62915, 2.65628, 0.5],
[6.24613, 4.36552, 0.5],
[4.87803, 6.04996, 0.5]]
design.setOriginalInputSample(inputSample)
design.setBlockSize(1)
interestVariables = ['y0', 'y1']
design.setInterestVariables(interestVariables)
myStudy.add(design)
chaos_0 = persalys.FunctionalChaosAnalysis('chaos_0', design)
chaos_0.setChaosDegree(4)
chaos_0.setSparseChaos(True)
chaos_0.setAnalyticalValidation(True)
chaos_0.setTestSampleValidation(False)
chaos_0.setKFoldValidation(False)
myStudy.add(chaos_0)
chaos_1 = persalys.FunctionalChaosAnalysis('chaos_1', design)
interestVariables = ['y1']
chaos_1.setInterestVariables(interestVariables)
chaos_1.setChaosDegree(4)
chaos_1.setSparseChaos(False)
chaos_1.setAnalyticalValidation(True)
chaos_1.setTestSampleValidation(True)
chaos_1.setTestSampleValidationPercentageOfPoints(30)
chaos_1.setTestSampleValidationSeed(2)
chaos_1.setKFoldValidation(True)
chaos_1.setKFoldValidationNumberOfFolds(4)
chaos_1.setKFoldValidationSeed(2)
myStudy.add(chaos_1)

